/*
Public key:
5
17760461808645921543898004792359847784343929785398822214497445061041296811196018109237009889756448291996689413067880662871602245908269425700945355080836341950422102886704921343489817853914085143652344198793934962162430366667855908656500364088051571352886331574600365402927416096349841643476755237547815403822417644884677607800791948516629599466806897306128566174513559053480791508024234380336280833453869517906835013035879564443137506289061170290933094091630639051450661384217769702293320195647458768456622832056237994350707826121376805351938275472628964147891203418944526001846962105520183717182810334413326872163717

Private key:
14208369446916737235118403833887878227475143828319057771597956048833037448956814487389607911805158633597351530454304530297281796726615540560756284064669073560337682309363937074791854283131268114921875359035147969729944293334284726925200291270441257082309065259680292322341932877079873314781404190038250994527595885845097879479404448977782741402960326051885491202782312462764482071174350438800993811853079311133493621788622902914885161904687235047124962490946777294663919231060775554901899356622016842057470873187102249140902167982784893265311602680321287115928095546640441326805067878854938153845143900119896529273421
17760461808645921543898004792359847784343929785398822214497445061041296811196018109237009889756448291996689413067880662871602245908269425700945355080836341950422102886704921343489817853914085143652344198793934962162430366667855908656500364088051571352886331574600365402927416096349841643476755237547815403822417644884677607800791948516629599466806897306128566174513559053480791508024234380336280833453869517906835013035879564443137506289061170290933094091630639051450661384217769702293320195647458768456622832056237994350707826121376805351938275472628964147891203418944526001846962105520183717182810334413326872163717

--------------------------------------------------------------------------------
Sing
philipp
14208369446916737235118403833887878227475143828319057771597956048833037448956814487389607911805158633597351530454304530297281796726615540560756284064669073560337682309363937074791854283131268114921875359035147969729944293334284726925200291270441257082309065259680292322341932877079873314781404190038250994527595885845097879479404448977782741402960326051885491202782312462764482071174350438800993811853079311133493621788622902914885161904687235047124962490946777294663919231060775554901899356622016842057470873187102249140902167982784893265311602680321287115928095546640441326805067878854938153845143900119896529273421
17760461808645921543898004792359847784343929785398822214497445061041296811196018109237009889756448291996689413067880662871602245908269425700945355080836341950422102886704921343489817853914085143652344198793934962162430366667855908656500364088051571352886331574600365402927416096349841643476755237547815403822417644884677607800791948516629599466806897306128566174513559053480791508024234380336280833453869517906835013035879564443137506289061170290933094091630639051450661384217769702293320195647458768456622832056237994350707826121376805351938275472628964147891203418944526001846962105520183717182810334413326872163717

Output = 17530223954754559584217213378184911345853130565614012509437547357607827339764547430398427287500025065623013764572304487342735386361365954048348258700464635832584552720116240482676394131903264625166647759856439038732027168514995717798354618036772559888758576290918301115408527114912145051252650252392909872584055845450510099026223033070479136016028593868574977807982800887674152341220362818527760132484369158417969880946209752354675711607440637205878516786397623376761140824315259833968255682111131062276835292267567775762201356309372760637642595747585342055753282695187342094229992058726992276524798923024644118071307

--------------------------------------------------------------------------------
Verify
philipp
17530223954754559584217213378184911345853130565614012509437547357607827339764547430398427287500025065623013764572304487342735386361365954048348258700464635832584552720116240482676394131903264625166647759856439038732027168514995717798354618036772559888758576290918301115408527114912145051252650252392909872584055845450510099026223033070479136016028593868574977807982800887674152341220362818527760132484369158417969880946209752354675711607440637205878516786397623376761140824315259833968255682111131062276835292267567775762201356309372760637642595747585342055753282695187342094229992058726992276524798923024644118071307
5
17760461808645921543898004792359847784343929785398822214497445061041296811196018109237009889756448291996689413067880662871602245908269425700945355080836341950422102886704921343489817853914085143652344198793934962162430366667855908656500364088051571352886331574600365402927416096349841643476755237547815403822417644884677607800791948516629599466806897306128566174513559053480791508024234380336280833453869517906835013035879564443137506289061170290933094091630639051450661384217769702293320195647458768456622832056237994350707826121376805351938275472628964147891203418944526001846962105520183717182810334413326872163717

Output = Signature valid.
*/

#include <iostream>
#include <gmpxx.h>
#include <sodium.h>
#include "dbghelp.h"

template <size_t N> // Number of bytes (array size)
void libsodium_to_GMP(const unsigned char (&libsodium_value)[N], mpz_class &GMP_value)
{
    GMP_value = 0;
    for (const auto &libsodium_byte : libsodium_value)
    {
        GMP_value *= 256;
        GMP_value += libsodium_byte;
    }
}

int main(const int argc, const char * const argv[])
{
    if (sodium_init() == -1)
    {
        std::cout << "sodium init failed !" << std::endl;
        return 1;
    }

    /* --------- SIGN --------- */
    if(std::string(argv[1]) == "Sign" && argc == 5 )
    {
        /* Berechnung Hash aus der Nachricht */
        const char * const message = argv[2];
        const size_t message_length = strlen(message);
        unsigned char hash[crypto_hash_sha512_BYTES];
        crypto_hash_sha512(hash, reinterpret_cast<const unsigned char*>(message), message_length);

        /* Konvertiere libsodium hash zu gmp_class */
        mpz_class gmpHashValue(0);
        libsodium_to_GMP(hash, gmpHashValue);

        /* Berechnung der Verschlüsselung  c ≡ m^d (mod N). */
        mpz_class d(argv[3]);
        mpz_class N(argv[4]);
        mpz_class signature(0);

        mpz_powm(signature.get_mpz_t(),  gmpHashValue.get_mpz_t(), d.get_mpz_t(),  N.get_mpz_t());

        /* Ausgabe des Ergebnisses an die Console */
        std::cout << signature.get_mpz_t() << std::endl;
        return 0;
    }

    /* --------- VERIFY --------- */
    else if(std::string(argv[1]) == "Verify" && argc == 6 )
    {
        /* Berechnung Hash aus der Nachricht */
        const char * const message = argv[2];
        const size_t message_length = strlen(message);
        // unsigned char hash[crypto_hash_sha256_BYTES];
        unsigned char hash[crypto_hash_sha512_BYTES];
        crypto_hash_sha512(hash, reinterpret_cast<const unsigned char*>(message), message_length);

        /* Konvertiere libsodium hash zu gmp_class */
        mpz_class gmpMessageHashValue(0);
        libsodium_to_GMP(hash, gmpMessageHashValue);

        /* Berechnung der Endschlüsselung der Signatur s ≡ m^e (mod N). */
        mpz_class signature(argv[3]);
        mpz_class e(argv[4]);
        mpz_class N(argv[5]);
        mpz_class verifyHash(0);
        mpz_powm(verifyHash.get_mpz_t(),  signature.get_mpz_t(), e.get_mpz_t(),  N.get_mpz_t());

        /* Vergleich der Signatur Hashes */
        if ( gmpMessageHashValue ==  verifyHash )
        {
            std::cout << "Signature valid." << std:: endl;
        }
        else
        {
            std::cout << "Signature invalid." << std:: endl;
        }
    }

    /* --------- ERROR --------- */
    else
    {
        std::cout << "Invalid input" << std:: endl;
        return 2;
    }
    return 0;
}


